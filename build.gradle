/*
 * Copyright (c) 2015, The MITRE Corporation. All rights reserved.
 * See LICENSE for complete terms.
 *
 * Java-TAXII Gradle Buildscript
 *
 * Jasen Jacobsen (jasenj1@mitre.org)
 *
 * Run
 *
 *	gradle
 *
 * from the commnand-line will default to "gradle jar".
 *
 * Jar will be built to 
 *
 * 	build/libs/java-taxii-${version}.jar
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'jar'

version = "1.1.0.1"
// version = "0.1"
group = "org.mitre.taxii"
archivesBaseName = "taxii"

// def isReleaseVersion = !version.endsWith("SNAPSHOT")
def taxiiSchemaVersion = "1.1 & 1.0"

String srcGeneratedDir = 'src/generated'
String srcGeneratedJavaDir = srcGeneratedDir + '/java'
String schemasDir = srcGeneratedDir + "/schemas"

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    main {
        java {
            srcDirs('src/main/java', srcGeneratedJavaDir)
        }
        resources {
            srcDirs = [schemasDir]
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

configurations {
    xjc
}

dependencies {
    xjc 'javax.activation:activation:1.1.1'
    xjc 'com.sun.xml.bind:jaxb-impl:2.2.5-2'
    xjc 'javax.xml:jsr173:1.0'
    xjc 'stax:stax-api:1.0.1'
    xjc 'javax.xml.bind:jaxb-api:2.2.11'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.5-2'

    // use the JAXB2 Commons project to include some XJC plugins
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics:0.6.5'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0'
    xjc 'org.jvnet.jaxb2_commons:jaxb2-default-value:1.1'
    
    // This plugin adds 'javax.xml.bind.annotation.XmlNs' annotations to
    // 'package-info.java' file according to specific definitions in
    // bindings.xml file. Those annotations associate namespace prefixes
    // with XML namespace URIs.
    xjc 'org.jvnet.jaxb2_commons:jaxb2-namespace-prefix:1.1'    

    compile 'javax.xml.bind:jaxb-api:2.2.11'
    compile 'org.jvnet.jaxb2_commons:jaxb2-basics-runtime:0.6.5'
    compile 'net.sf.saxon:Saxon-HE:9.5.1-5'
    compile 'org.apache.httpcomponents:httpclient:4.3.5' 
    compile 'org.apache.httpcomponents:httpclient-cache:4.3.5'
    compile 'org.apache.httpcomponents:httpmime:4.3.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.3.5'
    
    testCompile 'junit:junit:4.11'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable strict doclint in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task retrieveSchemas << {
    if (project.fileTree(schemasDir).isEmpty()) {
        // Get the schemas & patch them.
        println "Retrieving TAXII schemas from reference sources."
        
        ant.mkdir(dir:schemasDir)
        /* 
         * TODO: 
         * As of this writing, the official schemas on the TAXII web site do not include the Schematron rules, so 
         * get the schemas from a local directory. Once the official schemas have been modified, the below should be 
         * pointed at the official schemas.
         * 
         * NOTE: The patch files will ned to be updated once new versions are posted to the web site.
         */                
        // Get the TAXII 1.1 Schema.
        def schemaSource = new File(project.rootDir.absolutePath + "/" + "schemas" + "/TAXII_XMLMessageBinding_Schema-1.1-with-sch.xsd")
        //        URL schemaSource = new URL("https://raw.githubusercontent.com/TAXIIProject/TAXII-Specifications/1.1/TAXII_XMLMessageBinding_Schema.xsd")        
        File outFile = new File(project.rootDir.absolutePath + "/" + schemasDir + "/TAXII_XMLMessageBinding-1.1.xsd")
        outFile.write(schemaSource.getText())
        
        // Get the TAXII 1.0 Schema.
        schemaSource = new File(project.rootDir.absolutePath + "/" + "schemas" + "/TAXII_XMLMessageBinding_Schema-1.0-with-sch.xsd")
        //        taxiiUrl = new URL("https://raw.githubusercontent.com/TAXIIProject/TAXII-Specifications/1.0/TAXII_XMLMessageBinding_Schema.xsd")        
        outFile = new File(project.rootDir.absolutePath + "/" + schemasDir + "/TAXII_XMLMessageBinding-1.0.xsd")
        outFile.write(schemaSource.getText())
        
        // TODO: The following two schemas are already in a form we can pull from their web site.
        
        // Get the DefaultQuery Schema.
        schemaSource = new URL("https://raw.githubusercontent.com/TAXIIProject/TAXII-Specifications/1.1/TAXII_DefaultQuery_Schema.xsd")        
        outFile = new File(project.rootDir.absolutePath + "/" + schemasDir + "/TAXII_DefaultQuery.xsd")
        outFile.write(schemaSource.getText())
        
        // Get the XML Digital Signature Schema.
        schemaSource = new URL("http://www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd")        
        outFile = new File(project.rootDir.absolutePath + "/" + schemasDir + "/xmldsig-core-schema.xsd")
        outFile.write(schemaSource.getText())
    } else {
        println "Schemas are present. Retrieval is not needed."
        didWork = false
    }    
}

task patchSchemas << { 
    // This should only execute if retrieveSchemas did work.
    if (retrieveSchemas.didWork) {
        ant.patch(patchfile: "src/main/resources/xmldsig-core-schema.patch", originalfile: schemasDir + "/xmldsig-core-schema.xsd")    
        ant.patch(patchfile: "src/main/resources/TAXII_XMLMessageBinding_Schema-1.1.patch", originalfile: schemasDir + "/TAXII_XMLMessageBinding-1.1.xsd")    
        ant.patch(patchfile: "src/main/resources/TAXII_XMLMessageBinding_Schema-1.0.patch", originalfile: schemasDir + "/TAXII_XMLMessageBinding-1.0.xsd")    
        ant.patch(patchfile: "src/main/resources/TAXII_DefaultQuery.patch", originalfile: schemasDir + "/TAXII_DefaultQuery.xsd")    
    } else {
        println "Schemas already exist and are presumed patched. Nothing done."
        didWork = false
    }
}

task extractSchematron << {
    ant.xslt (destdir: srcGeneratedDir, extension: ".sch", basedir: schemasDir,
        includes: "TAXII_XMLMessage*.xsd", classpath: configurations.compile.asPath,
        style: 'src/main/resources/iso-schematron-xslt2/ExtractSchFromXSD-2.xsl')
}

task compileSchematron << {
    ant.xslt (destdir: "src/generated/schemas", extension: "-compiled.xsl", basedir: srcGeneratedDir,
        includes: "TAXII_XMLMessage*.sch", classpath: configurations.compile.asPath,
        style: 'src/main/resources/iso-schematron-xslt2/iso_schematron_message_xslt2.xsl')    
}

task generate << {
    String bindingDir = 'src/main/resources'

    ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
        classpath: configurations.xjc.asPath)

    ant.mkdir(dir: srcGeneratedJavaDir)
    ant.xjc(destdir: srcGeneratedJavaDir, header: false, readonly: true,
        extension: true, classpath: configurations.xjc.asPath) {

        arg(line: '-Xequals -XhashCode -Xfluent-api -Xvalue-constructor -Xdefault-value -Xnamespace-prefix')
        binding(dir: bindingDir, includes: '*.xjb')
        schema(dir: schemasDir, includes: '*.xsd')
        produces(dir: srcGeneratedJavaDir, includes: '**/*.java')
    }
}

task cleanGenerated << {
    ant.delete(dir: srcGeneratedDir)
}

jar {
    manifest {
        attributes 'Specification-Title': 'Trusted Automated Exchange of Indicator Information (TAXII)',
        'Specification-Version': '1.1 & 1.0',
        'Implementation-Title': 'Java-TAXII',
        'Implementation-Version': version,
        'Implementation-Vendor': 'The MITRE Corporation'
    }
    from 'LICENSE'
}

javadoc {
    options.overview = "src/main/java/overview.html"
    options.showAll()
    options.encoding("UTF-8")
    options.setUse(true)
    options.author(true)
    options.version(true)    
    options.windowTitle("java-taxii v." + version)
    options.docTitle("java-taxii v." + version)
    options.footer("Copyright (c) 2015, The MITRE Corporation. All rights reserved.")
    
    doFirst {
        javadoc.title = "java-taxii v." + version
        javadoc.options.docTitle = javadoc.title
    }    
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'LICENSE'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from 'LICENSE'
    from 'README.md'
    from sourceSets.main.allSource    
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives    
}


uploadArchives {
    
    repositories {        
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> 
                signing.signPom(deployment)
            }

            def username = project.hasProperty('ossrhUsername') ? ossrhUsername : false
            def password = project.hasProperty('ossrhPassword') ? ossrhPassword : false

            if (username && password) {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: username, password: password)                
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: username, password: password)                
                }
            } else {
                repository(url: "file://${project.projectDir}/build/artifacts/")
                snapshotRepository(url: "file://${project.projectDir}/build/artifacts/snapshots/")
            }
            
            
            pom.project {
                    name 'taxii'
                    packaging 'jar'
                    // version "${project.version}" - version handled automatically.
                    // optionally artifactId can be defined here 
                    description "The JAXB Bindings for TAXII v." + version
                    url "https://github.com/TAXIIProject/java-taxii"

                    scm {
                        connection "https://github.com/TAXIIProject/java-taxii.git"
                        developerConnection "https://github.com/TAXIIProject/java-taxii.git"
                        url "https://github.com/TAXIIProject/"
                    }

                    licenses {
                        license {
                            name "The BSD 3-Clause License"
                            url "https://raw.githubusercontent.com/TAXIIProject/java-taxii/master/LICENSE.txt"
                        }
                    }

                    developers {
                        developer {
                            id 'taxii'
                            name 'TAXII Team'
                            email 'taxii[ASCII character number 64]mitre.org'
                        }
                    }
            } // pom.project
            
        }
    }
}

task dist << {
    ant.zip(destfile: "build/java-taxii.zip") {
        fileset(dir: ".", includes: "README.txt, LICENSE.txt")
        fileset(dir: "build/libs", includes: "taxii-${version}.jar")
    }
}

// fix dependencies so that generate gets called before compileJava

patchSchemas.dependsOn retrieveSchemas

extractSchematron.dependsOn patchSchemas

compileSchematron.dependsOn extractSchematron

generate.dependsOn compileSchematron

compileJava.dependsOn generate

dist.dependsOn jar
